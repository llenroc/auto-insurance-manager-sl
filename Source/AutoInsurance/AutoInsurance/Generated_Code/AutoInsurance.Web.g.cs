//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoInsurance
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace AutoInsurance.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Agency' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AutoInsurance.Web")]
    public sealed partial class Agency : Entity
    {
        
        private string _address;
        
        private string _agencyId;
        
        private EntityCollection<InsurancePolicy> _insurancePolicies;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnAgencyIdChanging(string value);
        partial void OnAgencyIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Agency"/> class.
        /// </summary>
        public Agency()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Description="Адрес на агенцията", Name="Адрес", Order=2)]
        [Required(ErrorMessage="Полето \'Адрес\' е задължително")]
        [StringLength(255)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgencyId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Агенция", Order=0)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string AgencyId
        {
            get
            {
                return this._agencyId;
            }
            set
            {
                if ((this._agencyId != value))
                {
                    this.OnAgencyIdChanging(value);
                    this.ValidateProperty("AgencyId", value);
                    this._agencyId = value;
                    this.RaisePropertyChanged("AgencyId");
                    this.OnAgencyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InsurancePolicy"/> entity instances.
        /// </summary>
        [Association("Agency_InsurancePolicy", "AgencyId", "AgencyName")]
        [XmlIgnore()]
        public EntityCollection<InsurancePolicy> InsurancePolicies
        {
            get
            {
                if ((this._insurancePolicies == null))
                {
                    this._insurancePolicies = new EntityCollection<InsurancePolicy>(this, "InsurancePolicies", this.FilterInsurancePolicies, this.AttachInsurancePolicies, this.DetachInsurancePolicies);
                }
                return this._insurancePolicies;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Име", Order=1)]
        [Required(ErrorMessage="Полето \'Име\' е задължително")]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachInsurancePolicies(InsurancePolicy entity)
        {
            entity.Agency = this;
        }
        
        private void DetachInsurancePolicies(InsurancePolicy entity)
        {
            entity.Agency = null;
        }
        
        private bool FilterInsurancePolicies(InsurancePolicy entity)
        {
            return (entity.AgencyName == this.AgencyId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._agencyId;
        }
    }
    
    /// <summary>
    /// The 'Auto' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AutoInsurance.Web")]
    public sealed partial class Auto : Entity
    {
        
        private int _autoId;
        
        private EntityRef<AutoType> _autoType;
        
        private Nullable<int> _autoTypeId;
        
        private string _color;
        
        private string _description;
        
        private Nullable<int> _doorsCount;
        
        private Nullable<int> _engineDisplacement;
        
        private Nullable<DateTime> _firstRegistrationDate;
        
        private string _frameNumber;
        
        private EntityRef<FuelType> _fuelType;
        
        private Nullable<int> _fuelTypeId;
        
        private EntityCollection<InsurancePolicy> _insurancePolicies;
        
        private Nullable<int> _loadingCapacity;
        
        private string _make;
        
        private Nullable<int> _makeYear;
        
        private string _model;
        
        private Nullable<int> _ownerPersonId;
        
        private EntityRef<Person> _person;
        
        private EntityRef<Purpose> _purpos;
        
        private Nullable<int> _purposeId;
        
        private string _regNumber;
        
        private Nullable<int> _seatsCount;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIdChanging(int value);
        partial void OnAutoIdChanged();
        partial void OnAutoTypeIdChanging(Nullable<int> value);
        partial void OnAutoTypeIdChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDoorsCountChanging(Nullable<int> value);
        partial void OnDoorsCountChanged();
        partial void OnEngineDisplacementChanging(Nullable<int> value);
        partial void OnEngineDisplacementChanged();
        partial void OnFirstRegistrationDateChanging(Nullable<DateTime> value);
        partial void OnFirstRegistrationDateChanged();
        partial void OnFrameNumberChanging(string value);
        partial void OnFrameNumberChanged();
        partial void OnFuelTypeIdChanging(Nullable<int> value);
        partial void OnFuelTypeIdChanged();
        partial void OnLoadingCapacityChanging(Nullable<int> value);
        partial void OnLoadingCapacityChanged();
        partial void OnMakeChanging(string value);
        partial void OnMakeChanged();
        partial void OnMakeYearChanging(Nullable<int> value);
        partial void OnMakeYearChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnOwnerPersonIdChanging(Nullable<int> value);
        partial void OnOwnerPersonIdChanged();
        partial void OnPurposeIdChanging(Nullable<int> value);
        partial void OnPurposeIdChanged();
        partial void OnRegNumberChanging(string value);
        partial void OnRegNumberChanged();
        partial void OnSeatsCountChanging(Nullable<int> value);
        partial void OnSeatsCountChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Auto"/> class.
        /// </summary>
        public Auto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="ID", Order=0)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required(ErrorMessage="Полето \'\' е задължително")]
        [RoundtripOriginal()]
        public int AutoId
        {
            get
            {
                return this._autoId;
            }
            set
            {
                if ((this._autoId != value))
                {
                    this.OnAutoIdChanging(value);
                    this.ValidateProperty("AutoId", value);
                    this._autoId = value;
                    this.RaisePropertyChanged("AutoId");
                    this.OnAutoIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="AutoType"/> entity.
        /// </summary>
        [Association("AutoType_Auto", "AutoTypeId", "AutoTypeId", IsForeignKey=true)]
        [XmlIgnore()]
        public AutoType AutoType
        {
            get
            {
                if ((this._autoType == null))
                {
                    this._autoType = new EntityRef<AutoType>(this, "AutoType", this.FilterAutoType);
                }
                return this._autoType.Entity;
            }
            set
            {
                AutoType previous = this.AutoType;
                if ((previous != value))
                {
                    this.ValidateProperty("AutoType", value);
                    if ((previous != null))
                    {
                        this._autoType.Entity = null;
                        previous.Autos.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AutoTypeId = value.AutoTypeId;
                    }
                    else
                    {
                        this.AutoTypeId = default(Nullable<int>);
                    }
                    this._autoType.Entity = value;
                    if ((value != null))
                    {
                        value.Autos.Add(this);
                    }
                    this.RaisePropertyChanged("AutoType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoTypeId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Description="Тип на ватомобила", Name="Тип", Order=0)]
        [Required(ErrorMessage="Полето \'Тип на автомобила\' е задължително")]
        [RoundtripOriginal()]
        public Nullable<int> AutoTypeId
        {
            get
            {
                return this._autoTypeId;
            }
            set
            {
                if ((this._autoTypeId != value))
                {
                    this.OnAutoTypeIdChanging(value);
                    this.RaiseDataMemberChanging("AutoTypeId");
                    this.ValidateProperty("AutoTypeId", value);
                    this._autoTypeId = value;
                    this.RaiseDataMemberChanged("AutoTypeId");
                    this.OnAutoTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Color' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Цвят", Order=2)]
        [Required(ErrorMessage="Полето \'Цвят\' е задължително")]
        [StringLength(32)]
        public string Color
        {
            get
            {
                return this._color;
            }
            set
            {
                if ((this._color != value))
                {
                    this.OnColorChanging(value);
                    this.RaiseDataMemberChanging("Color");
                    this.ValidateProperty("Color", value);
                    this._color = value;
                    this.RaiseDataMemberChanged("Color");
                    this.OnColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Описание", Order=0)]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DoorsCount' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Брой врати", Order=0)]
        [Required(ErrorMessage="Полето \'Брой врати\' е задължително")]
        public Nullable<int> DoorsCount
        {
            get
            {
                return this._doorsCount;
            }
            set
            {
                if ((this._doorsCount != value))
                {
                    this.OnDoorsCountChanging(value);
                    this.RaiseDataMemberChanging("DoorsCount");
                    this.ValidateProperty("DoorsCount", value);
                    this._doorsCount = value;
                    this.RaiseDataMemberChanged("DoorsCount");
                    this.OnDoorsCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EngineDisplacement' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Обем на двигателя (мм 3)", Order=0)]
        [Required(ErrorMessage="Полето \'Обем на двигателя\' е задължително")]
        public Nullable<int> EngineDisplacement
        {
            get
            {
                return this._engineDisplacement;
            }
            set
            {
                if ((this._engineDisplacement != value))
                {
                    this.OnEngineDisplacementChanging(value);
                    this.RaiseDataMemberChanging("EngineDisplacement");
                    this.ValidateProperty("EngineDisplacement", value);
                    this._engineDisplacement = value;
                    this.RaiseDataMemberChanged("EngineDisplacement");
                    this.OnEngineDisplacementChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstRegistrationDate' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Начална дата на регистрация", Order=0)]
        [Required(ErrorMessage="Полето \'Начална дата на регистрация\' е задължително")]
        public Nullable<DateTime> FirstRegistrationDate
        {
            get
            {
                return this._firstRegistrationDate;
            }
            set
            {
                if ((this._firstRegistrationDate != value))
                {
                    this.OnFirstRegistrationDateChanging(value);
                    this.RaiseDataMemberChanging("FirstRegistrationDate");
                    this.ValidateProperty("FirstRegistrationDate", value);
                    this._firstRegistrationDate = value;
                    this.RaiseDataMemberChanged("FirstRegistrationDate");
                    this.OnFirstRegistrationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FrameNumber' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Рама номер", Order=0)]
        [Required(ErrorMessage="Полето \'Рама номер\' е задължително")]
        [StringLength(20)]
        public string FrameNumber
        {
            get
            {
                return this._frameNumber;
            }
            set
            {
                if ((this._frameNumber != value))
                {
                    this.OnFrameNumberChanging(value);
                    this.RaiseDataMemberChanging("FrameNumber");
                    this.ValidateProperty("FrameNumber", value);
                    this._frameNumber = value;
                    this.RaiseDataMemberChanged("FrameNumber");
                    this.OnFrameNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FuelType"/> entity.
        /// </summary>
        [Association("FuelType_Auto", "FuelTypeId", "FuelTypeId", IsForeignKey=true)]
        [XmlIgnore()]
        public FuelType FuelType
        {
            get
            {
                if ((this._fuelType == null))
                {
                    this._fuelType = new EntityRef<FuelType>(this, "FuelType", this.FilterFuelType);
                }
                return this._fuelType.Entity;
            }
            set
            {
                FuelType previous = this.FuelType;
                if ((previous != value))
                {
                    this.ValidateProperty("FuelType", value);
                    if ((previous != null))
                    {
                        this._fuelType.Entity = null;
                        previous.Autos.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FuelTypeId = value.FuelTypeId;
                    }
                    else
                    {
                        this.FuelTypeId = default(Nullable<int>);
                    }
                    this._fuelType.Entity = value;
                    if ((value != null))
                    {
                        value.Autos.Add(this);
                    }
                    this.RaisePropertyChanged("FuelType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FuelTypeId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Гориво", Order=0)]
        [Required(ErrorMessage="Полето \'Гориво\' е задължително")]
        [RoundtripOriginal()]
        public Nullable<int> FuelTypeId
        {
            get
            {
                return this._fuelTypeId;
            }
            set
            {
                if ((this._fuelTypeId != value))
                {
                    this.OnFuelTypeIdChanging(value);
                    this.RaiseDataMemberChanging("FuelTypeId");
                    this.ValidateProperty("FuelTypeId", value);
                    this._fuelTypeId = value;
                    this.RaiseDataMemberChanged("FuelTypeId");
                    this.OnFuelTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InsurancePolicy"/> entity instances.
        /// </summary>
        [Association("Auto_InsurancePolicy", "AutoId", "AutoId")]
        [XmlIgnore()]
        public EntityCollection<InsurancePolicy> InsurancePolicies
        {
            get
            {
                if ((this._insurancePolicies == null))
                {
                    this._insurancePolicies = new EntityCollection<InsurancePolicy>(this, "InsurancePolicies", this.FilterInsurancePolicies, this.AttachInsurancePolicies, this.DetachInsurancePolicies);
                }
                return this._insurancePolicies;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoadingCapacity' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Товар (за тежкотоварни автомобили)", Order=0)]
        public Nullable<int> LoadingCapacity
        {
            get
            {
                return this._loadingCapacity;
            }
            set
            {
                if ((this._loadingCapacity != value))
                {
                    this.OnLoadingCapacityChanging(value);
                    this.RaiseDataMemberChanging("LoadingCapacity");
                    this.ValidateProperty("LoadingCapacity", value);
                    this._loadingCapacity = value;
                    this.RaiseDataMemberChanged("LoadingCapacity");
                    this.OnLoadingCapacityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Make' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Производител", Order=0)]
        [Required(ErrorMessage="Полето \'Производител\' е задължително")]
        [StringLength(32)]
        public string Make
        {
            get
            {
                return this._make;
            }
            set
            {
                if ((this._make != value))
                {
                    this.OnMakeChanging(value);
                    this.RaiseDataMemberChanging("Make");
                    this.ValidateProperty("Make", value);
                    this._make = value;
                    this.RaiseDataMemberChanged("Make");
                    this.OnMakeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MakeYear' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Година на производство", Order=0)]
        [Required(ErrorMessage="Полето \'Година на производство\' е задължително")]
        public Nullable<int> MakeYear
        {
            get
            {
                return this._makeYear;
            }
            set
            {
                if ((this._makeYear != value))
                {
                    this.OnMakeYearChanging(value);
                    this.RaiseDataMemberChanging("MakeYear");
                    this.ValidateProperty("MakeYear", value);
                    this._makeYear = value;
                    this.RaiseDataMemberChanged("MakeYear");
                    this.OnMakeYearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Model' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Модел", Order=0)]
        [Required(ErrorMessage="Полето \'Модел\' е задължително")]
        [StringLength(32)]
        public string Model
        {
            get
            {
                return this._model;
            }
            set
            {
                if ((this._model != value))
                {
                    this.OnModelChanging(value);
                    this.RaiseDataMemberChanging("Model");
                    this.ValidateProperty("Model", value);
                    this._model = value;
                    this.RaiseDataMemberChanged("Model");
                    this.OnModelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerPersonId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Собственик", Order=0)]
        [Required(ErrorMessage="Полето \'Собственик\' е задължително")]
        [RoundtripOriginal()]
        public Nullable<int> OwnerPersonId
        {
            get
            {
                return this._ownerPersonId;
            }
            set
            {
                if ((this._ownerPersonId != value))
                {
                    this.OnOwnerPersonIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerPersonId");
                    this.ValidateProperty("OwnerPersonId", value);
                    this._ownerPersonId = value;
                    this.RaiseDataMemberChanged("OwnerPersonId");
                    this.OnOwnerPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Person"/> entity.
        /// </summary>
        [Association("Person_Auto", "OwnerPersonId", "PersonId", IsForeignKey=true)]
        [XmlIgnore()]
        public Person Person
        {
            get
            {
                if ((this._person == null))
                {
                    this._person = new EntityRef<Person>(this, "Person", this.FilterPerson);
                }
                return this._person.Entity;
            }
            set
            {
                Person previous = this.Person;
                if ((previous != value))
                {
                    this.ValidateProperty("Person", value);
                    if ((previous != null))
                    {
                        this._person.Entity = null;
                        previous.Autos.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerPersonId = value.PersonId;
                    }
                    else
                    {
                        this.OwnerPersonId = default(Nullable<int>);
                    }
                    this._person.Entity = value;
                    if ((value != null))
                    {
                        value.Autos.Add(this);
                    }
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Purpose"/> entity.
        /// </summary>
        [Association("Purpose_Auto", "PurposeId", "PurposeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Purpose Purpos
        {
            get
            {
                if ((this._purpos == null))
                {
                    this._purpos = new EntityRef<Purpose>(this, "Purpos", this.FilterPurpos);
                }
                return this._purpos.Entity;
            }
            set
            {
                Purpose previous = this.Purpos;
                if ((previous != value))
                {
                    this.ValidateProperty("Purpos", value);
                    if ((previous != null))
                    {
                        this._purpos.Entity = null;
                        previous.Autos.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PurposeId = value.PurposeId;
                    }
                    else
                    {
                        this.PurposeId = default(Nullable<int>);
                    }
                    this._purpos.Entity = value;
                    if ((value != null))
                    {
                        value.Autos.Add(this);
                    }
                    this.RaisePropertyChanged("Purpos");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurposeId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Предназначение", Order=0)]
        [Required(ErrorMessage="Полето \'Предназначение\' е задължително")]
        [RoundtripOriginal()]
        public Nullable<int> PurposeId
        {
            get
            {
                return this._purposeId;
            }
            set
            {
                if ((this._purposeId != value))
                {
                    this.OnPurposeIdChanging(value);
                    this.RaiseDataMemberChanging("PurposeId");
                    this.ValidateProperty("PurposeId", value);
                    this._purposeId = value;
                    this.RaiseDataMemberChanged("PurposeId");
                    this.OnPurposeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegNumber' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Регистрационен номер", Order=0)]
        [Required(ErrorMessage="Полето \'Регистрационен номер\' е задължително")]
        [StringLength(15)]
        public string RegNumber
        {
            get
            {
                return this._regNumber;
            }
            set
            {
                if ((this._regNumber != value))
                {
                    this.OnRegNumberChanging(value);
                    this.RaiseDataMemberChanging("RegNumber");
                    this.ValidateProperty("RegNumber", value);
                    this._regNumber = value;
                    this.RaiseDataMemberChanged("RegNumber");
                    this.OnRegNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SeatsCount' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Description="Брой Места", Name="Брой места", Order=0)]
        [Required(ErrorMessage="Полето \'Брой места\' е задължително")]
        public Nullable<int> SeatsCount
        {
            get
            {
                return this._seatsCount;
            }
            set
            {
                if ((this._seatsCount != value))
                {
                    this.OnSeatsCountChanging(value);
                    this.RaiseDataMemberChanging("SeatsCount");
                    this.ValidateProperty("SeatsCount", value);
                    this._seatsCount = value;
                    this.RaiseDataMemberChanged("SeatsCount");
                    this.OnSeatsCountChanged();
                }
            }
        }
        
        private bool FilterAutoType(AutoType entity)
        {
            return (entity.AutoTypeId == this.AutoTypeId);
        }
        
        private bool FilterFuelType(FuelType entity)
        {
            return (entity.FuelTypeId == this.FuelTypeId);
        }
        
        private void AttachInsurancePolicies(InsurancePolicy entity)
        {
            entity.Auto = this;
        }
        
        private void DetachInsurancePolicies(InsurancePolicy entity)
        {
            entity.Auto = null;
        }
        
        private bool FilterInsurancePolicies(InsurancePolicy entity)
        {
            return (entity.AutoId == this.AutoId);
        }
        
        private bool FilterPerson(Person entity)
        {
            return (entity.PersonId == this.OwnerPersonId);
        }
        
        private bool FilterPurpos(Purpose entity)
        {
            return (entity.PurposeId == this.PurposeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._autoId;
        }
    }
    
    /// <summary>
    /// The 'AutoType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AutoInsurance.Web")]
    public sealed partial class AutoType : Entity
    {
        
        private EntityCollection<Auto> _autos;
        
        private int _autoTypeId;
        
        private Nullable<decimal> _coeficient;
        
        private Nullable<bool> _hasLoadingCapacity;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoTypeIdChanging(int value);
        partial void OnAutoTypeIdChanged();
        partial void OnCoeficientChanging(Nullable<decimal> value);
        partial void OnCoeficientChanged();
        partial void OnHasLoadingCapacityChanging(Nullable<bool> value);
        partial void OnHasLoadingCapacityChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoType"/> class.
        /// </summary>
        public AutoType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Auto"/> entity instances.
        /// </summary>
        [Association("AutoType_Auto", "AutoTypeId", "AutoTypeId")]
        [XmlIgnore()]
        public EntityCollection<Auto> Autos
        {
            get
            {
                if ((this._autos == null))
                {
                    this._autos = new EntityCollection<Auto>(this, "Autos", this.FilterAutos, this.AttachAutos, this.DetachAutos);
                }
                return this._autos;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoTypeId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int AutoTypeId
        {
            get
            {
                return this._autoTypeId;
            }
            set
            {
                if ((this._autoTypeId != value))
                {
                    this.OnAutoTypeIdChanging(value);
                    this.ValidateProperty("AutoTypeId", value);
                    this._autoTypeId = value;
                    this.RaisePropertyChanged("AutoTypeId");
                    this.OnAutoTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Coeficient' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Description="Коефициент за изчисление крайната цена", Name="Коефициент ", Order=0)]
        [Required(ErrorMessage="Полето \'Коефициент\' е задължително")]
        public Nullable<decimal> Coeficient
        {
            get
            {
                return this._coeficient;
            }
            set
            {
                if ((this._coeficient != value))
                {
                    this.OnCoeficientChanging(value);
                    this.RaiseDataMemberChanging("Coeficient");
                    this.ValidateProperty("Coeficient", value);
                    this._coeficient = value;
                    this.RaiseDataMemberChanged("Coeficient");
                    this.OnCoeficientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasLoadingCapacity' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Товарен ли е", Order=0)]
        [Required(ErrorMessage="Полето \'Товарен ли е\' е задължително")]
        public Nullable<bool> HasLoadingCapacity
        {
            get
            {
                return this._hasLoadingCapacity;
            }
            set
            {
                if ((this._hasLoadingCapacity != value))
                {
                    this.OnHasLoadingCapacityChanging(value);
                    this.RaiseDataMemberChanging("HasLoadingCapacity");
                    this.ValidateProperty("HasLoadingCapacity", value);
                    this._hasLoadingCapacity = value;
                    this.RaiseDataMemberChanged("HasLoadingCapacity");
                    this.OnHasLoadingCapacityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Наименование", Order=0)]
        [Required(ErrorMessage="Полето \'Наименование\' е задължително")]
        [StringLength(32)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachAutos(Auto entity)
        {
            entity.AutoType = this;
        }
        
        private void DetachAutos(Auto entity)
        {
            entity.AutoType = null;
        }
        
        private bool FilterAutos(Auto entity)
        {
            return (entity.AutoTypeId == this.AutoTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._autoTypeId;
        }
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AutoInsurance.Web")]
    public sealed partial class Company : Entity
    {
        
        private Nullable<decimal> _autoTypePrice;
        
        private int _companyId;
        
        private Nullable<decimal> _insuranceBasePrice;
        
        private EntityCollection<InsurancePolicy> _insurancePolicies;
        
        private Nullable<decimal> _loadingCapacityPricePer1000kg;
        
        private string _name;
        
        private Nullable<decimal> _oldDriverCoeficient;
        
        private Nullable<decimal> _purposePrice;
        
        private Nullable<decimal> _vechicleDisplacementPrice;
        
        private Nullable<decimal> _youngDriverCoeficient;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoTypePriceChanging(Nullable<decimal> value);
        partial void OnAutoTypePriceChanged();
        partial void OnCompanyIdChanging(int value);
        partial void OnCompanyIdChanged();
        partial void OnInsuranceBasePriceChanging(Nullable<decimal> value);
        partial void OnInsuranceBasePriceChanged();
        partial void OnLoadingCapacityPricePer1000kgChanging(Nullable<decimal> value);
        partial void OnLoadingCapacityPricePer1000kgChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOldDriverCoeficientChanging(Nullable<decimal> value);
        partial void OnOldDriverCoeficientChanged();
        partial void OnPurposePriceChanging(Nullable<decimal> value);
        partial void OnPurposePriceChanged();
        partial void OnVechicleDisplacementPriceChanging(Nullable<decimal> value);
        partial void OnVechicleDisplacementPriceChanged();
        partial void OnYoungDriverCoeficientChanging(Nullable<decimal> value);
        partial void OnYoungDriverCoeficientChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoTypePrice' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Description="За изисление", Name="Цена за тип на автомобила", Order=0)]
        [Required(ErrorMessage="Полето \'\' е задължително")]
        public Nullable<decimal> AutoTypePrice
        {
            get
            {
                return this._autoTypePrice;
            }
            set
            {
                if ((this._autoTypePrice != value))
                {
                    this.OnAutoTypePriceChanging(value);
                    this.RaiseDataMemberChanging("AutoTypePrice");
                    this.ValidateProperty("AutoTypePrice", value);
                    this._autoTypePrice = value;
                    this.RaiseDataMemberChanged("AutoTypePrice");
                    this.OnAutoTypePriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CompanyId
        {
            get
            {
                return this._companyId;
            }
            set
            {
                if ((this._companyId != value))
                {
                    this.OnCompanyIdChanging(value);
                    this.ValidateProperty("CompanyId", value);
                    this._companyId = value;
                    this.RaisePropertyChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InsuranceBasePrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> InsuranceBasePrice
        {
            get
            {
                return this._insuranceBasePrice;
            }
            set
            {
                if ((this._insuranceBasePrice != value))
                {
                    this.OnInsuranceBasePriceChanging(value);
                    this.RaiseDataMemberChanging("InsuranceBasePrice");
                    this.ValidateProperty("InsuranceBasePrice", value);
                    this._insuranceBasePrice = value;
                    this.RaiseDataMemberChanged("InsuranceBasePrice");
                    this.OnInsuranceBasePriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InsurancePolicy"/> entity instances.
        /// </summary>
        [Association("Company_InsurancePolicy", "CompanyId", "CompanyId")]
        [XmlIgnore()]
        public EntityCollection<InsurancePolicy> InsurancePolicies
        {
            get
            {
                if ((this._insurancePolicies == null))
                {
                    this._insurancePolicies = new EntityCollection<InsurancePolicy>(this, "InsurancePolicies", this.FilterInsurancePolicies, this.AttachInsurancePolicies, this.DetachInsurancePolicies);
                }
                return this._insurancePolicies;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoadingCapacityPricePer1000kg' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LoadingCapacityPricePer1000kg
        {
            get
            {
                return this._loadingCapacityPricePer1000kg;
            }
            set
            {
                if ((this._loadingCapacityPricePer1000kg != value))
                {
                    this.OnLoadingCapacityPricePer1000kgChanging(value);
                    this.RaiseDataMemberChanging("LoadingCapacityPricePer1000kg");
                    this.ValidateProperty("LoadingCapacityPricePer1000kg", value);
                    this._loadingCapacityPricePer1000kg = value;
                    this.RaiseDataMemberChanged("LoadingCapacityPricePer1000kg");
                    this.OnLoadingCapacityPricePer1000kgChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OldDriverCoeficient' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OldDriverCoeficient
        {
            get
            {
                return this._oldDriverCoeficient;
            }
            set
            {
                if ((this._oldDriverCoeficient != value))
                {
                    this.OnOldDriverCoeficientChanging(value);
                    this.RaiseDataMemberChanging("OldDriverCoeficient");
                    this.ValidateProperty("OldDriverCoeficient", value);
                    this._oldDriverCoeficient = value;
                    this.RaiseDataMemberChanged("OldDriverCoeficient");
                    this.OnOldDriverCoeficientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurposePrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PurposePrice
        {
            get
            {
                return this._purposePrice;
            }
            set
            {
                if ((this._purposePrice != value))
                {
                    this.OnPurposePriceChanging(value);
                    this.RaiseDataMemberChanging("PurposePrice");
                    this.ValidateProperty("PurposePrice", value);
                    this._purposePrice = value;
                    this.RaiseDataMemberChanged("PurposePrice");
                    this.OnPurposePriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VechicleDisplacementPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> VechicleDisplacementPrice
        {
            get
            {
                return this._vechicleDisplacementPrice;
            }
            set
            {
                if ((this._vechicleDisplacementPrice != value))
                {
                    this.OnVechicleDisplacementPriceChanging(value);
                    this.RaiseDataMemberChanging("VechicleDisplacementPrice");
                    this.ValidateProperty("VechicleDisplacementPrice", value);
                    this._vechicleDisplacementPrice = value;
                    this.RaiseDataMemberChanged("VechicleDisplacementPrice");
                    this.OnVechicleDisplacementPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YoungDriverCoeficient' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> YoungDriverCoeficient
        {
            get
            {
                return this._youngDriverCoeficient;
            }
            set
            {
                if ((this._youngDriverCoeficient != value))
                {
                    this.OnYoungDriverCoeficientChanging(value);
                    this.RaiseDataMemberChanging("YoungDriverCoeficient");
                    this.ValidateProperty("YoungDriverCoeficient", value);
                    this._youngDriverCoeficient = value;
                    this.RaiseDataMemberChanged("YoungDriverCoeficient");
                    this.OnYoungDriverCoeficientChanged();
                }
            }
        }
        
        private void AttachInsurancePolicies(InsurancePolicy entity)
        {
            entity.Company = this;
        }
        
        private void DetachInsurancePolicies(InsurancePolicy entity)
        {
            entity.Company = null;
        }
        
        private bool FilterInsurancePolicies(InsurancePolicy entity)
        {
            return (entity.CompanyId == this.CompanyId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyId;
        }
    }
    
    /// <summary>
    /// The 'FuelType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AutoInsurance.Web")]
    public sealed partial class FuelType : Entity
    {
        
        private EntityCollection<Auto> _autos;
        
        private int _fuelTypeId;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFuelTypeIdChanging(int value);
        partial void OnFuelTypeIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FuelType"/> class.
        /// </summary>
        public FuelType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Auto"/> entity instances.
        /// </summary>
        [Association("FuelType_Auto", "FuelTypeId", "FuelTypeId")]
        [XmlIgnore()]
        public EntityCollection<Auto> Autos
        {
            get
            {
                if ((this._autos == null))
                {
                    this._autos = new EntityCollection<Auto>(this, "Autos", this.FilterAutos, this.AttachAutos, this.DetachAutos);
                }
                return this._autos;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FuelTypeId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int FuelTypeId
        {
            get
            {
                return this._fuelTypeId;
            }
            set
            {
                if ((this._fuelTypeId != value))
                {
                    this.OnFuelTypeIdChanging(value);
                    this.ValidateProperty("FuelTypeId", value);
                    this._fuelTypeId = value;
                    this.RaisePropertyChanged("FuelTypeId");
                    this.OnFuelTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachAutos(Auto entity)
        {
            entity.FuelType = this;
        }
        
        private void DetachAutos(Auto entity)
        {
            entity.FuelType = null;
        }
        
        private bool FilterAutos(Auto entity)
        {
            return (entity.FuelTypeId == this.FuelTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._fuelTypeId;
        }
    }
    
    /// <summary>
    /// The 'InsurancePolicy' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AutoInsurance.Web")]
    public sealed partial class InsurancePolicy : Entity
    {
        
        private EntityRef<Agency> _agency;
        
        private string _agencyName;
        
        private EntityRef<Auto> _auto;
        
        private Nullable<int> _autoId;
        
        private EntityRef<Company> _company;
        
        private Nullable<int> _companyId;
        
        private Nullable<int> _driverExperienceYears;
        
        private Nullable<DateTime> _endDate;
        
        private Nullable<bool> _hasAccidents;
        
        private int _insurancePolicyId;
        
        private Nullable<DateTime> _issueDate;
        
        private string _number;
        
        private Nullable<decimal> _price;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAgencyNameChanging(string value);
        partial void OnAgencyNameChanged();
        partial void OnAutoIdChanging(Nullable<int> value);
        partial void OnAutoIdChanged();
        partial void OnCompanyIdChanging(Nullable<int> value);
        partial void OnCompanyIdChanged();
        partial void OnDriverExperienceYearsChanging(Nullable<int> value);
        partial void OnDriverExperienceYearsChanged();
        partial void OnEndDateChanging(Nullable<DateTime> value);
        partial void OnEndDateChanged();
        partial void OnHasAccidentsChanging(Nullable<bool> value);
        partial void OnHasAccidentsChanged();
        partial void OnInsurancePolicyIdChanging(int value);
        partial void OnInsurancePolicyIdChanged();
        partial void OnIssueDateChanging(Nullable<DateTime> value);
        partial void OnIssueDateChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnPriceChanging(Nullable<decimal> value);
        partial void OnPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InsurancePolicy"/> class.
        /// </summary>
        public InsurancePolicy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Agency"/> entity.
        /// </summary>
        [Association("Agency_InsurancePolicy", "AgencyName", "AgencyId", IsForeignKey=true)]
        [XmlIgnore()]
        public Agency Agency
        {
            get
            {
                if ((this._agency == null))
                {
                    this._agency = new EntityRef<Agency>(this, "Agency", this.FilterAgency);
                }
                return this._agency.Entity;
            }
            set
            {
                Agency previous = this.Agency;
                if ((previous != value))
                {
                    this.ValidateProperty("Agency", value);
                    if ((previous != null))
                    {
                        this._agency.Entity = null;
                        previous.InsurancePolicies.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AgencyName = value.AgencyId;
                    }
                    else
                    {
                        this.AgencyName = default(string);
                    }
                    this._agency.Entity = value;
                    if ((value != null))
                    {
                        value.InsurancePolicies.Add(this);
                    }
                    this.RaisePropertyChanged("Agency");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgencyName' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Агенция", Order=5)]
        [Required(ErrorMessage="Полето \'Агенция\' е задължително")]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string AgencyName
        {
            get
            {
                return this._agencyName;
            }
            set
            {
                if ((this._agencyName != value))
                {
                    this.OnAgencyNameChanging(value);
                    this.RaiseDataMemberChanging("AgencyName");
                    this.ValidateProperty("AgencyName", value);
                    this._agencyName = value;
                    this.RaiseDataMemberChanged("AgencyName");
                    this.OnAgencyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Auto"/> entity.
        /// </summary>
        [Association("Auto_InsurancePolicy", "AutoId", "AutoId", IsForeignKey=true)]
        [XmlIgnore()]
        public Auto Auto
        {
            get
            {
                if ((this._auto == null))
                {
                    this._auto = new EntityRef<Auto>(this, "Auto", this.FilterAuto);
                }
                return this._auto.Entity;
            }
            set
            {
                Auto previous = this.Auto;
                if ((previous != value))
                {
                    this.ValidateProperty("Auto", value);
                    if ((previous != null))
                    {
                        this._auto.Entity = null;
                        previous.InsurancePolicies.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AutoId = value.AutoId;
                    }
                    else
                    {
                        this.AutoId = default(Nullable<int>);
                    }
                    this._auto.Entity = value;
                    if ((value != null))
                    {
                        value.InsurancePolicies.Add(this);
                    }
                    this.RaisePropertyChanged("Auto");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Автомобил", Order=2)]
        [Required(ErrorMessage="Полето \'Автомобил\' е задължително")]
        [RoundtripOriginal()]
        public Nullable<int> AutoId
        {
            get
            {
                return this._autoId;
            }
            set
            {
                if ((this._autoId != value))
                {
                    this.OnAutoIdChanging(value);
                    this.RaiseDataMemberChanging("AutoId");
                    this.ValidateProperty("AutoId", value);
                    this._autoId = value;
                    this.RaiseDataMemberChanged("AutoId");
                    this.OnAutoIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_InsurancePolicy", "CompanyId", "CompanyId", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.InsurancePolicies.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyId = value.CompanyId;
                    }
                    else
                    {
                        this.CompanyId = default(Nullable<int>);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.InsurancePolicies.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Застрахователна компания", Order=6)]
        [Required(ErrorMessage="Полето \'Застрахователна компания\' е задължително")]
        [RoundtripOriginal()]
        public Nullable<int> CompanyId
        {
            get
            {
                return this._companyId;
            }
            set
            {
                if ((this._companyId != value))
                {
                    this.OnCompanyIdChanging(value);
                    this.RaiseDataMemberChanging("CompanyId");
                    this.ValidateProperty("CompanyId", value);
                    this._companyId = value;
                    this.RaiseDataMemberChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DriverExperienceYears' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Опит на водача (години)", Order=4)]
        [Required(ErrorMessage="Полето \'Опит на водача\' е задължително")]
        public Nullable<int> DriverExperienceYears
        {
            get
            {
                return this._driverExperienceYears;
            }
            set
            {
                if ((this._driverExperienceYears != value))
                {
                    this.OnDriverExperienceYearsChanging(value);
                    this.RaiseDataMemberChanging("DriverExperienceYears");
                    this.ValidateProperty("DriverExperienceYears", value);
                    this._driverExperienceYears = value;
                    this.RaiseDataMemberChanged("DriverExperienceYears");
                    this.OnDriverExperienceYearsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Крайна дата на застраховката", Order=8)]
        [Required(ErrorMessage="Полето \'Крайна дата\' е задължително")]
        public Nullable<DateTime> EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasAccidents' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(false)]
        [Display(AutoGenerateField=true, Name="Има ли предишни инциденти", Order=3)]
        [Required(ErrorMessage="Полето \'Има ли предишни инциденти\' е задължително")]
        public Nullable<bool> HasAccidents
        {
            get
            {
                return this._hasAccidents;
            }
            set
            {
                if ((this._hasAccidents != value))
                {
                    this.OnHasAccidentsChanging(value);
                    this.RaiseDataMemberChanging("HasAccidents");
                    this.ValidateProperty("HasAccidents", value);
                    this._hasAccidents = value;
                    this.RaiseDataMemberChanged("HasAccidents");
                    this.OnHasAccidentsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InsurancePolicyId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int InsurancePolicyId
        {
            get
            {
                return this._insurancePolicyId;
            }
            set
            {
                if ((this._insurancePolicyId != value))
                {
                    this.OnInsurancePolicyIdChanging(value);
                    this.ValidateProperty("InsurancePolicyId", value);
                    this._insurancePolicyId = value;
                    this.RaisePropertyChanged("InsurancePolicyId");
                    this.OnInsurancePolicyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueDate' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Дата на издаване", Order=1)]
        [Required(ErrorMessage="Полето \'Дата на издаване\' е задължително")]
        public Nullable<DateTime> IssueDate
        {
            get
            {
                return this._issueDate;
            }
            set
            {
                if ((this._issueDate != value))
                {
                    this.OnIssueDateChanging(value);
                    this.RaiseDataMemberChanging("IssueDate");
                    this.ValidateProperty("IssueDate", value);
                    this._issueDate = value;
                    this.RaiseDataMemberChanged("IssueDate");
                    this.OnIssueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Номер на полицата", Order=0)]
        [StringLength(8)]
        public string Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Price' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Сума за плащане", Order=9)]
        public Nullable<decimal> Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnPriceChanging(value);
                    this.RaiseDataMemberChanging("Price");
                    this.ValidateProperty("Price", value);
                    this._price = value;
                    this.RaiseDataMemberChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
        
        private bool FilterAgency(Agency entity)
        {
            return (entity.AgencyId == this.AgencyName);
        }
        
        private bool FilterAuto(Auto entity)
        {
            return (entity.AutoId == this.AutoId);
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyId == this.CompanyId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._insurancePolicyId;
        }
    }
    
    /// <summary>
    /// The 'Person' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AutoInsurance.Web")]
    public sealed partial class Person : Entity
    {
        
        private string _address;
        
        private EntityCollection<Auto> _autos;
        
        private string _name;
        
        private string _number;
        
        private int _personId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Person"/> class.
        /// </summary>
        public Person()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Адрес", Order=0)]
        [StringLength(50)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Auto"/> entity instances.
        /// </summary>
        [Association("Person_Auto", "PersonId", "OwnerPersonId")]
        [XmlIgnore()]
        public EntityCollection<Auto> Autos
        {
            get
            {
                if ((this._autos == null))
                {
                    this._autos = new EntityCollection<Auto>(this, "Autos", this.FilterAutos, this.AttachAutos, this.DetachAutos);
                }
                return this._autos;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="Име", Order=0)]
        [Required(ErrorMessage="Полето \'Име\' е задължително")]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="ЕГН", Order=0)]
        [Required(ErrorMessage="Полето \'ЕГН\' е задължително")]
        [StringLength(50)]
        public string Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaisePropertyChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        private void AttachAutos(Auto entity)
        {
            entity.Person = this;
        }
        
        private void DetachAutos(Auto entity)
        {
            entity.Person = null;
        }
        
        private bool FilterAutos(Auto entity)
        {
            return (entity.OwnerPersonId == this.PersonId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._personId;
        }
    }
    
    /// <summary>
    /// The 'Purpose' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AutoInsurance.Web")]
    public sealed partial class Purpose : Entity
    {
        
        private EntityCollection<Auto> _autos;
        
        private Nullable<decimal> _coeficient;
        
        private string _name;
        
        private int _purposeId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCoeficientChanging(Nullable<decimal> value);
        partial void OnCoeficientChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPurposeIdChanging(int value);
        partial void OnPurposeIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Purpose"/> class.
        /// </summary>
        public Purpose()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Auto"/> entity instances.
        /// </summary>
        [Association("Purpose_Auto", "PurposeId", "PurposeId")]
        [XmlIgnore()]
        public EntityCollection<Auto> Autos
        {
            get
            {
                if ((this._autos == null))
                {
                    this._autos = new EntityCollection<Auto>(this, "Autos", this.FilterAutos, this.AttachAutos, this.DetachAutos);
                }
                return this._autos;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Coeficient' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Coeficient
        {
            get
            {
                return this._coeficient;
            }
            set
            {
                if ((this._coeficient != value))
                {
                    this.OnCoeficientChanging(value);
                    this.RaiseDataMemberChanging("Coeficient");
                    this.ValidateProperty("Coeficient", value);
                    this._coeficient = value;
                    this.RaiseDataMemberChanged("Coeficient");
                    this.OnCoeficientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurposeId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PurposeId
        {
            get
            {
                return this._purposeId;
            }
            set
            {
                if ((this._purposeId != value))
                {
                    this.OnPurposeIdChanging(value);
                    this.ValidateProperty("PurposeId", value);
                    this._purposeId = value;
                    this.RaisePropertyChanged("PurposeId");
                    this.OnPurposeIdChanged();
                }
            }
        }
        
        private void AttachAutos(Auto entity)
        {
            entity.Purpos = this;
        }
        
        private void DetachAutos(Auto entity)
        {
            entity.Purpos = null;
        }
        
        private bool FilterAutos(Auto entity)
        {
            return (entity.PurposeId == this.PurposeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._purposeId;
        }
    }
}
namespace AutoInsurance.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using AutoInsurance.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AutoInsuranceService' DomainService.
    /// </summary>
    public sealed partial class AutoInsuranceContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoInsuranceContext"/> class.
        /// </summary>
        public AutoInsuranceContext() : 
                this(new WebDomainClient<IAutoInsuranceServiceContract>(new Uri("AutoInsurance-Web-Services-AutoInsuranceService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoInsuranceContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AutoInsuranceService service URI.</param>
        public AutoInsuranceContext(Uri serviceUri) : 
                this(new WebDomainClient<IAutoInsuranceServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoInsuranceContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AutoInsuranceContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Agency"/> entity instances that have been loaded into this <see cref="AutoInsuranceContext"/> instance.
        /// </summary>
        public EntitySet<Agency> Agencies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Agency>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Auto"/> entity instances that have been loaded into this <see cref="AutoInsuranceContext"/> instance.
        /// </summary>
        public EntitySet<Auto> Autos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Auto>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AutoType"/> entity instances that have been loaded into this <see cref="AutoInsuranceContext"/> instance.
        /// </summary>
        public EntitySet<AutoType> AutoTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AutoType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="AutoInsuranceContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FuelType"/> entity instances that have been loaded into this <see cref="AutoInsuranceContext"/> instance.
        /// </summary>
        public EntitySet<FuelType> FuelTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FuelType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="InsurancePolicy"/> entity instances that have been loaded into this <see cref="AutoInsuranceContext"/> instance.
        /// </summary>
        public EntitySet<InsurancePolicy> InsurancePolicies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InsurancePolicy>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Person"/> entity instances that have been loaded into this <see cref="AutoInsuranceContext"/> instance.
        /// </summary>
        public EntitySet<Person> Persons
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Person>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Purpose"/> entity instances that have been loaded into this <see cref="AutoInsuranceContext"/> instance.
        /// </summary>
        public EntitySet<Purpose> Purposes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Purpose>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Agency"/> entity instances using the 'GetAgencies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Agency"/> entity instances.</returns>
        public EntityQuery<Agency> GetAgenciesQuery()
        {
            this.ValidateMethod("GetAgenciesQuery", null);
            return base.CreateQuery<Agency>("GetAgencies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Auto"/> entity instances using the 'GetAutos' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Auto"/> entity instances.</returns>
        public EntityQuery<Auto> GetAutosQuery()
        {
            this.ValidateMethod("GetAutosQuery", null);
            return base.CreateQuery<Auto>("GetAutos", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AutoType"/> entity instances using the 'GetAutoTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AutoType"/> entity instances.</returns>
        public EntityQuery<AutoType> GetAutoTypesQuery()
        {
            this.ValidateMethod("GetAutoTypesQuery", null);
            return base.CreateQuery<AutoType>("GetAutoTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FuelType"/> entity instances using the 'GetFuelTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FuelType"/> entity instances.</returns>
        public EntityQuery<FuelType> GetFuelTypesQuery()
        {
            this.ValidateMethod("GetFuelTypesQuery", null);
            return base.CreateQuery<FuelType>("GetFuelTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InsurancePolicy"/> entity instances using the 'GetInsurancePolicies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InsurancePolicy"/> entity instances.</returns>
        public EntityQuery<InsurancePolicy> GetInsurancePoliciesQuery()
        {
            this.ValidateMethod("GetInsurancePoliciesQuery", null);
            return base.CreateQuery<InsurancePolicy>("GetInsurancePolicies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Person"/> entity instances using the 'GetPersons' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Person"/> entity instances.</returns>
        public EntityQuery<Person> GetPersonsQuery()
        {
            this.ValidateMethod("GetPersonsQuery", null);
            return base.CreateQuery<Person>("GetPersons", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Purpose"/> entity instances using the 'GetPurposes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Purpose"/> entity instances.</returns>
        public EntityQuery<Purpose> GetPurposesQuery()
        {
            this.ValidateMethod("GetPurposesQuery", null);
            return base.CreateQuery<Purpose>("GetPurposes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AutoInsuranceContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AutoInsuranceService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAutoInsuranceServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAgencies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/GetAgenciesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/GetAgencies", ReplyAction="http://tempuri.org/AutoInsuranceService/GetAgenciesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAgencies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAgencies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAgencies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAgencies' operation.</returns>
            QueryResult<Agency> EndGetAgencies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAutos' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/GetAutosDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/GetAutos", ReplyAction="http://tempuri.org/AutoInsuranceService/GetAutosResponse")]
            [WebGet()]
            IAsyncResult BeginGetAutos(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAutos'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAutos'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAutos' operation.</returns>
            QueryResult<Auto> EndGetAutos(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAutoTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/GetAutoTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/GetAutoTypes", ReplyAction="http://tempuri.org/AutoInsuranceService/GetAutoTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAutoTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAutoTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAutoTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAutoTypes' operation.</returns>
            QueryResult<AutoType> EndGetAutoTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/GetCompaniesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/GetCompanies", ReplyAction="http://tempuri.org/AutoInsuranceService/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFuelTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/GetFuelTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/GetFuelTypes", ReplyAction="http://tempuri.org/AutoInsuranceService/GetFuelTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetFuelTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFuelTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFuelTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFuelTypes' operation.</returns>
            QueryResult<FuelType> EndGetFuelTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInsurancePolicies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/GetInsurancePoliciesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/GetInsurancePolicies", ReplyAction="http://tempuri.org/AutoInsuranceService/GetInsurancePoliciesResponse")]
            [WebGet()]
            IAsyncResult BeginGetInsurancePolicies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInsurancePolicies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInsurancePolicies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInsurancePolicies' operation.</returns>
            QueryResult<InsurancePolicy> EndGetInsurancePolicies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersons' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/GetPersonsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/GetPersons", ReplyAction="http://tempuri.org/AutoInsuranceService/GetPersonsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPersons(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersons'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersons'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersons' operation.</returns>
            QueryResult<Person> EndGetPersons(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPurposes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/GetPurposesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/GetPurposes", ReplyAction="http://tempuri.org/AutoInsuranceService/GetPurposesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPurposes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPurposes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPurposes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPurposes' operation.</returns>
            QueryResult<Purpose> EndGetPurposes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AutoInsuranceService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AutoInsuranceService/SubmitChanges", ReplyAction="http://tempuri.org/AutoInsuranceService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AutoInsuranceContextEntityContainer : EntityContainer
        {
            
            public AutoInsuranceContextEntityContainer()
            {
                this.CreateEntitySet<Agency>(EntitySetOperations.All);
                this.CreateEntitySet<Auto>(EntitySetOperations.All);
                this.CreateEntitySet<AutoType>(EntitySetOperations.All);
                this.CreateEntitySet<Company>(EntitySetOperations.All);
                this.CreateEntitySet<FuelType>(EntitySetOperations.All);
                this.CreateEntitySet<InsurancePolicy>(EntitySetOperations.All);
                this.CreateEntitySet<Person>(EntitySetOperations.All);
                this.CreateEntitySet<Purpose>(EntitySetOperations.All);
            }
        }
    }
}
